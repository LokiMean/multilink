import { useNavigate } from 'react-router-dom';
import { useState, useEffect } from 'react';
import { fetchPlatforms } from '../api/platforms'; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å fetchPlatformData
import '../styles/HomePage.css';

export default function HomePage() {
  const navigate = useNavigate();
  const [query, setQuery] = useState('');
  const [platformData, setPlatformData] = useState([]); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchPlatforms() // –ò—Å–ø–æ–ª—å–∑—É–µ–º fetchPlatformData
      .then(data => {
        if (Array.isArray(data)) {
          setPlatformData(data);
        } else {
          console.error("fetchPlatformData –Ω–µ –≤–µ—Ä–Ω—É–ª –º–∞—Å—Å–∏–≤:", data);
          setError("–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º.");
          setPlatformData([]); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫
        }
      })
      .catch((err) => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º:", err);
        setError(err.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º");
      })
      .finally(() => setLoading(false));
  }, []);

  // –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–µ—Ç–∫–µ (–∫–æ–≥–¥–∞ –Ω–µ—Ç –ø–æ–∏—Å–∫–∞)
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º platformData –∫–∞–∫ –º–∞—Å—Å–∏–≤
  const platformsToDisplay = platformData.map(platform => ({
    id: platform.id,
    name: platform.name,
    imageUrl: platform.image_url, // –ò—Å–ø–æ–ª—å–∑—É–µ–º image_url –∏–∑ –¥–∞–Ω–Ω—ã—Ö API
  }));

  // –ü—Ä–æ–¥—É–∫—Ç—ã, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º platformData –∫–∞–∫ –º–∞—Å—Å–∏–≤
  const filteredProducts = query
    ? platformData.flatMap(platform => // platform - —ç—Ç–æ –æ–±—ä–µ–∫—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ platformData
        (platform.links || []).filter(link => // link - —ç—Ç–æ –æ–±—ä–µ–∫—Ç –∏–∑ platform.links
          link.name.toLowerCase().includes(query.toLowerCase()) ||
          String(link.id).toLowerCase().includes(query.toLowerCase()) // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º ID —Å—Å—ã–ª–∫–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        )
      )
    : [];

  return (
    <div className="home-container">
      <h1>Welcome to Hamster Shop</h1>
      <p className="subtitle">Choose a platform to explore cool hamster stuff üêπ</p>

      <input
        type="text"
        placeholder="Search all items..."
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        className="search-input"
      />

      {loading ? (
        <p>Loading platforms...</p>
      ) : error ? (
        <p>Error: {error}</p>
      ) : query ? ( // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        <div className="product-grid">
          {filteredProducts.length > 0 ? (
            filteredProducts.map((link) => ( // link - —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å—Å—ã–ª–∫–∏
              <a
                key={link.id} // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å—Å—ã–ª–∫–∏ –∫–∞–∫ –∫–ª—é—á
                href={link.link} // –ò—Å–ø–æ–ª—å–∑—É–µ–º link.link –¥–ª—è href
                target="_blank"
                rel="noreferrer"
                className="product-card"
              >
                {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º link.image_url –Ω–∞–ø—Ä—è–º—É—é. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL. */}
                <img src={link.image_url} alt={link.name} />
                <span>{link.name}</span> {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º link.name –¥–ª—è —Ç–µ–∫—Å—Ç–∞ */}
              </a>
            ))
          ) : (
            <p>No products found matching "{query}"</p>
          )}
        </div>
      ) : ( // –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ç–∫—É –ø–ª–∞—Ç—Ñ–æ—Ä–º
      <div className="platform-grid">
        {platformsToDisplay.map((p_display) => {
          const fullPlatformObject = platformData.find(data => data.id === p_display.id);

          return (
            <div
              key={p_display.id}
              className="platform-btn"
              onClick={() => {
                if (fullPlatformObject) {
                  navigate(`/platform/${fullPlatformObject.name}`, { state: { platform: fullPlatformObject } });
                }
              }}
            >
              <img src={p_display.imageUrl} alt={p_display.name} />
              <div className="platform-name">{p_display.name}</div> {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã */}
            </div>
          );
        })}
      </div>
      )}
    </div>
  );
}
